<!DOCTYPE html>
<html>
<head>
  <title>Random Video Chat</title>
  <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-5CD3Q7YK0M"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-5CD3Q7YK0M');
</script>
  <style>
    #video-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, 300px);
      grid-auto-rows: 300px;
    }
    video {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
  </style>
</head>
<body>
  <div id="video-grid"></div>
  
  <script src="/socket.io/socket.io.js"></script>
  <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
  <script>
    const roomId = '<%= roomId %>';
    const socket = io('/');
    const videoGrid = document.getElementById('video-grid');
    
    const userId = Math.floor(Math.random() * 10000);
    const myPeer = new Peer(userId);
    const myVideo = document.createElement('video');
    myVideo.muted = true;
    const peers = {};
    
    navigator.mediaDevices.getUserMedia({
      video: true,
      audio: true
    }).then(stream => {
      addVideoStream(myVideo, stream);
      
      myPeer.on('call', call => {
        call.answer(stream);
        const video = document.createElement('video');
        call.on('stream', userVideoStream => {
          addVideoStream(video, userVideoStream);
        });
      });
      
      socket.on('user-connected', userId => {
        connectToNewUser(userId, stream);
      });
    });
    
    socket.on('user-disconnected', userId => {
      if (peers[userId]) peers[userId].close();
    });
    
    myPeer.on('open', id => {
      socket.emit('join-room', roomId, id);
    });
    
    function connectToNewUser(userId, stream) {
      const call = myPeer.call(userId, stream);
      const video = document.createElement('video');
      call.on('stream', userVideoStream => {
        addVideoStream(video, userVideoStream);
      });
      call.on('close', () => {
        video.remove();
      });
      peers[userId] = call;
    }
    
    function addVideoStream(video, stream) {
      video.srcObject = stream;
      video.addEventListener('loadedmetadata', () => {
        video.play();
      });
      videoGrid.append(video);
    }
  </script>
</body>
</html>