<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>FbiooGames - Video Chat</title>
  <meta name="description"
    content="Connect with random people worldwide via video chat. Safe, anonymous, and fun! Meet new friends instantly on StrangerMeet by FbiooGames, Best Free Video chat with strangers or random.">
  <meta name="keywords"
    content="random video chat, chat with strangers, online video chat, meet new people, FbiooGames, StrangerMeet, Free random video chat, top best free video chat, best random video chat">

  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <!-- Google tag (gtag.js) -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-5CD3Q7YK0M"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag() { dataLayer.push(arguments); }
    gtag('js', new Date());

    gtag('config', 'G-5CD3Q7YK0M');
  </script>
  <style>
    :root {
      /* Color Scheme */
      --primary: #6c5ce7;
      --secondary: #a29bfe;
      --dark: #2d3436;
      --light: #f5f6fa;
      --danger: #ff7675;
      --success: #00b894;

      /* Spacing System */
      --footer-height: 100px;
      --controls-height: 80px;
      --chat-bottom-space: 120px;
      --mobile-footer-height: 70px;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Poppins', sans-serif;
      background: var(--dark);
      color: var(--light);
      height: calc(100vh - var(--footer-height));
      margin-bottom: var(--footer-height);
      overflow: hidden;
      position: relative;
    }

    /* Video Container */
    #video-container {
      display: flex;
      height: 100%;
      position: relative;
    }

    .video-box {
      flex: 1;
      position: relative;
      overflow: hidden;
      transition: all 0.3s ease;
      box-shadow: 5px 0px 0px 10px yellow;
    }

    .video-box::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.3);
      z-index: 1;
      transition: all 0.3s ease;
    }

    .video-box.active::before {
      background: transparent;
    }

    video {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transform: scaleX(-1);
    }

    #remote-video {
      transform: scaleX(1);
    }

    /* User Info */
    .user-info {
      position: absolute;
      bottom: 20px;
      left: 20px;
      z-index: 2;
      background: rgba(0, 0, 0, 0.5);
      padding: 10px 15px;
      border-radius: 20px;
      display: flex;
      align-items: center;
    }

    .user-info i {
      margin-right: 10px;
      color: var(--secondary);
    }

    /* Loading Indicator */
    .loader {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 10;
      text-align: center;
    }

    .spinner {
      width: 50px;
      height: 50px;
      border: 5px solid rgba(255, 255, 255, 0.3);
      border-radius: 50%;
      border-top-color: var(--primary);
      animation: spin 1s ease-in-out infinite;
      margin: 0 auto;
    }

    /* Footer/Ad Space */
    #footer-space {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      height: var(--footer-height);
      background: rgba(0, 0, 0, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 90;

    }

    .ad-container {
      width: 100%;
      max-width: 970px;
      height: 150px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 8px;
      display: flex;
      justify-content: center;
      align-items: center;
      color: rgba(255, 255, 255, 0.7);
    }

    /* Controls */
    #controls {
      position: fixed;
      bottom: calc(var(--footer-height) + 20px);
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      gap: 15px;
      z-index: 100;
      background: rgba(0, 0, 0, 0.5);
      padding: 10px 20px;
      border-radius: 50px;
      backdrop-filter: blur(10px);
    }

    .control-btn {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.2);
      border: none;
      color: white;
      font-size: 1.2rem;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .control-btn:hover {
      transform: scale(1.1);
      background: rgba(255, 255, 255, 0.3);
    }

    #end-btn {
      background: var(--danger);
    }

    /* Chat Box */
    #chat-box {
      position: fixed;
      right: 20px;
      bottom: calc(var(--footer-height) + var(--chat-bottom-space));
      width: 350px;
      max-height: 50vh;
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      border-radius: 15px;
      display: flex;
      flex-direction: column;
      overflow: hidden;
      box-shadow: 0 5px 25px rgba(0, 0, 0, 0.3);
      z-index: 100;
      transition: all 0.3s ease;
    }

    #chat-header {
      padding: 15px;
      background: rgba(0, 0, 0, 0.2);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    #chat-toggle {
      background: none;
      border: none;
      color: white;
      font-size: 1rem;
      cursor: pointer;
    }

    #messages {
      flex: 1;
      overflow-y: auto;
      padding: 15px;
    }

    .message {
      margin-bottom: 10px;
      padding: 8px 12px;
      border-radius: 15px;
      max-width: 80%;
      word-wrap: break-word;
      animation: messageIn 0.3s ease-out;
    }

    .remote {
      background: var(--primary);
      color: white;
      align-self: flex-start;
      border-bottom-left-radius: 5px;
    }

    .local {
      background: rgba(255, 255, 255, 0.9);
      color: var(--dark);
      margin-left: auto;
      border-bottom-right-radius: 5px;
    }

    .message-time {
      font-size: 0.7rem;
      opacity: 0.7;
      margin-top: 3px;
      text-align: right;
    }

    /* Message Form */
    #message-form {
      display: flex;
      padding: 10px;
      background: rgba(0, 0, 0, 0.1);
      border-top: 1px solid rgba(255, 255, 255, 0.1);
    }

    #message-input {
      flex: 1;
      padding: 12px 15px;
      border: none;
      border-radius: 20px;
      background: rgba(255, 255, 255, 0.9);
      outline: none;
      font-size: 14px;
      color: #333;
    }

    #message-input:focus {
      box-shadow: 0 0 0 2px var(--primary);
    }

    #send-btn {
      margin-left: 10px;
      background: var(--primary);
      color: white;
      border: none;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    #send-btn:hover {
      background: var(--secondary);
      transform: scale(1.05);
    }

    /* Typing Indicator */
    #typing-indicator {
      display: none;
      padding: 0 15px 10px;
      font-size: 12px;
      color: #999;
    }

    .typing-dots {
      display: inline-flex;
      align-items: center;
    }

    .typing-dots span {
      width: 8px;
      height: 8px;
      margin: 0 2px;
      background-color: var(--secondary);
      border-radius: 50%;
      display: inline-block;
      animation: typing 1.4s infinite both;
    }

    .typing-dots span:nth-child(2) {
      animation-delay: 0.2s;
    }

    .typing-dots span:nth-child(3) {
      animation-delay: 0.4s;
    }

    /* Animations */
    @keyframes messageIn {
      from {
        opacity: 0;
        transform: translateY(10px);
      }

      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @keyframes typing {

      0%,
      60%,
      100% {
        transform: translateY(0);
      }

      30% {
        transform: translateY(-5px);
      }
    }

    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }

    /* Responsive Breakpoints */
    @media (max-width: 1200px) {
      :root {
        --footer-height: 90px;
        --chat-bottom-space: 110px;
      }
    }

    @media (max-width: 992px) {
      :root {
        --footer-height: 80px;
        --chat-bottom-space: 100px;
      }

      #chat-box {
        width: 300px;
      }
    }

    @media (max-width: 768px) {
      :root {
        --footer-height: var(--mobile-footer-height);
        --controls-height: 70px;
        --chat-bottom-space: 90px;
      }

      body {
        height: calc(93vh - var(--mobile-footer-height));
        margin-bottom: var(--mobile-footer-height);
      }

      #video-container {
        flex-direction: column;
      }

      .video-box {
        height: 50vh;
        box-shadow: 0px 0px 5px yellow;
      }

      #chat-box {
        width: 90%;
        right: 5%;
        bottom: calc(var(--mobile-footer-height) + 80px);
        max-height: 40vh;
      }

      #controls {
        bottom: calc(var(--mobile-footer-height) + 50px);
      }

      .ad-container {
        height: 150px;

      }
    }

    @media (max-width: 576px) {
      :root {
        --mobile-footer-height: 60px;
        --chat-bottom-space: 70px;
      }

      .ad-container {
        font-size: 0.8rem;
      }

      #chat-box {
        bottom: calc(var(--mobile-footer-height) + 60px);
        max-height: 35vh;
      }

      .control-btn {
        width: 45px;
        height: 45px;
        font-size: 1rem;
      }
    }
  </style>
</head>

<body>
  <!-- Video Container -->
  <div id="video-container">
    <!-- Remote Video -->
    <div class="video-box" id="remote-video-box">
      <div class="loader" id="loader">
        <div class="spinner"></div>
        <p>Connecting to stranger...</p>
      </div>
      <video id="remote-video" autoplay></video>
      <div class="user-info">
        <i class="fas fa-user"></i>
        <span>Stranger</span>
      </div>
      <div id="typing-indicator">
        <div class="typing-dots">
          <span></span>
          <span></span>
          <span></span>
        </div>
        <span>is typing...</span>
      </div>
    </div>


    <!-- Local Video -->
    <div class="video-box" id="local-video-box">
      <video id="local-video" autoplay muted></video>
      <div class="user-info">
        <i class="fas fa-user"></i>
        <span id="remote-username">You</span>
      </div>

    </div>
  </div>

  <!-- Footer Ad Space -->
  <div id="footer-space">
    <div class="ad-container">
      <p>Advertisement Space (970/412x150)</p>
      <!-- Replace with actual ad code:
      <script src="https://adservice.example.com/ad.js"></script>
      -->
    </div>
  </div>

  <!-- Controls -->
  <div id="controls">
    <button class="control-btn" id="mute-btn" title="Mute">
      <i class="fas fa-microphone"></i>
    </button>
    <button class="control-btn" id="video-btn" title="Stop Video">
      <i class="fas fa-video"></i>
    </button>
    <button class="control-btn" id="chat-btn" title="Chat">
      <i class="fas fa-comment-dots"></i>
    </button>
    <button class="control-btn" id="end-btn" title="End Call">
      <i class="fas fa-phone-slash"></i>
    </button>
  </div>

  <!-- Chat Box -->
  <div id="chat-box">
    <div id="chat-header">
      <h3>Chat</h3>
      <button id="chat-toggle"><i class="fas fa-times"></i></button>
    </div>
    <div id="messages"></div>
    <form id="message-form">
      <input type="text" id="message-input" placeholder="Type a message..." autocomplete="off">
      <button type="submit" id="send-btn">
        <i class="fas fa-paper-plane"></i>
      </button>
    </form>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
  <script>
    // Get URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const roomId = urlParams.get('room') || '<%= roomId %>';

    // DOM elements
    const localVideo = document.getElementById('local-video');
    const remoteVideo = document.getElementById('remote-video');
    const localVideoBox = document.getElementById('local-video-box');
    const remoteVideoBox = document.getElementById('remote-video-box');
    const loader = document.getElementById('loader');
    const muteBtn = document.getElementById('mute-btn');
    const videoBtn = document.getElementById('video-btn');
    const chatBtn = document.getElementById('chat-btn');
    const endBtn = document.getElementById('end-btn');
    const chatBox = document.getElementById('chat-box');
    const chatToggle = document.getElementById('chat-toggle');
    const messages = document.getElementById('messages');
    const messageForm = document.getElementById('message-form');
    const messageInput = document.getElementById('message-input');
    const typingIndicator = document.getElementById('typing-indicator');
    const footerSpace = document.getElementById('footer-space');

    // State variables
    let localStream;
    let peer;
    let currentCall;
    let isMuted = false;
    let isVideoOff = false;
    let isChatOpen = true;

    // Initialize Socket.io
    const socket = io();

    // Initialize PeerJS with random ID
    peer = new Peer();

    // Focus the input when chat is opened
    messageInput.focus();

    // Handle form submission
    messageForm.addEventListener('submit', (e) => {
      e.preventDefault();
      sendMessage();
    });

    // Also allow sending with Enter key
    messageInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
      }
    });

    // Typing detection
    let typingTimeout;
    messageInput.addEventListener('input', () => {
      socket.emit('typing', roomId, true);
      clearTimeout(typingTimeout);
      typingTimeout = setTimeout(() => {
        socket.emit('typing', roomId, false);
      }, 1000);
    });

    function sendMessage() {
      const message = messageInput.value.trim();
      if (message) {
        // Emit the message to the server
        socket.emit('chat-message', roomId, message);

        // Add to local chat
        addMessage(message, true);

        // Clear input and refocus
        messageInput.value = '';
        messageInput.focus();

        // Stop typing indicator
        socket.emit('typing', roomId, false);
      }
    }

    function addMessage(message, isLocal = false) {
      const messageElement = document.createElement('div');
      messageElement.className = `message ${isLocal ? 'local' : 'remote'}`;

      // Add timestamp
      const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      messageElement.innerHTML = `
        <div class="message-content">${message}</div>
        <div class="message-time">${timestamp}</div>
      `;

      messages.appendChild(messageElement);
      messages.scrollTop = messages.scrollHeight;
    }

    // Toggle chat visibility
    function toggleChat() {
      isChatOpen = !isChatOpen;
      chatBox.style.display = isChatOpen ? 'flex' : 'none';

      // On mobile, hide footer when chat is open
      if (window.innerWidth <= 768) {
        footerSpace.style.display = isChatOpen ? 'none' : 'flex';
      }

      // Focus input when chat becomes visible
      if (isChatOpen) {
        messageInput.focus();
      }
    }

    // Make sure chat box is clickable
    chatBox.addEventListener('click', (e) => {
      e.stopPropagation();
    });

    // Initialize video chat
    peer.on('open', (id) => {
      // Get user media
      navigator.mediaDevices.getUserMedia({ video: true, audio: true })
        .then(stream => {
          localStream = stream;
          localVideo.srcObject = stream;

          // Notify server we're ready to connect
          socket.emit('ready', roomId, id);

          // Listen for incoming calls
          peer.on('call', call => {
            call.answer(localStream);
            currentCall = call;

            call.on('stream', remoteStream => {
              remoteVideo.srcObject = remoteStream;
              loader.style.display = 'none';
              remoteVideoBox.classList.add('active');
            });

            call.on('close', endCall);
          });
        })
        .catch(err => {
          console.error('Failed to get local stream', err);
        });
    });

    // Global variable to track if we're already trying to reconnect
    let isReconnecting = false;

    // Handle partner disconnection
    socket.on('partner-disconnected', () => {
      if (isReconnecting) return;

      isReconnecting = true;

      // Show notification
      const notification = document.createElement('div');
      notification.className = 'notification';
      notification.innerHTML = `
    <i class="fas fa-user-slash"></i>
    <span>Stranger disconnected. Finding someone new...</span>
  `;
      document.body.appendChild(notification);

      // Clean up current connection
      if (currentCall) {
        currentCall.close();
      }
      if (localStream) {
        localStream.getTracks().forEach(track => track.stop());
      }

      // Remove notification after delay
      setTimeout(() => {
        notification.remove();
      }, 3000);

      // Rejoin the queue
      const preferences = {
        language: null,
        interests: []
      };
      socket.emit('join-queue', preferences);
    });
    // yahi hai uper gloabal
    // Handle signaling from server
    socket.on('user-connected', (userId) => {
      // Call the other user
      const call = peer.call(userId, localStream);
      currentCall = call;

      call.on('stream', remoteStream => {
        remoteVideo.srcObject = remoteStream;
        loader.style.display = 'none';
        remoteVideoBox.classList.add('active');
      });

      call.on('close', endCall);
    });

    socket.on('user-disconnected', () => {
      endCall();
    });

    // Handle incoming messages
    socket.on('chat-message', (message) => {
      addMessage(message, false);
    });

    // Handle typing indicators
    socket.on('typing', (isTyping) => {
      typingIndicator.style.display = isTyping ? 'block' : 'none';
    });

    // Control buttons
    muteBtn.addEventListener('click', () => {
      const audioTracks = localStream.getAudioTracks();
      isMuted = !isMuted;
      audioTracks.forEach(track => {
        track.enabled = !isMuted;
      });
      muteBtn.innerHTML = isMuted ? '<i class="fas fa-microphone-slash"></i>' : '<i class="fas fa-microphone"></i>';
    });

    videoBtn.addEventListener('click', () => {
      const videoTracks = localStream.getVideoTracks();
      isVideoOff = !isVideoOff;
      videoTracks.forEach(track => {
        track.enabled = !isVideoOff;
      });
      videoBtn.innerHTML = isVideoOff ? '<i class="fas fa-video-slash"></i>' : '<i class="fas fa-video"></i>';
      localVideoBox.classList.toggle('active', !isVideoOff);
    });

    chatBtn.addEventListener('click', toggleChat);
    chatToggle.addEventListener('click', toggleChat);

    // End call function
    function endCall() {
      if (currentCall) {
        currentCall.close();
      }
      if (localStream) {
        localStream.getTracks().forEach(track => track.stop());
      }
      socket.emit('leave-room', roomId);
      remoteVideo.srcObject = null;

      setTimeout(() => {
        window.location.href = '/';
      }, 1500);
    }

    endBtn.addEventListener('click', endCall);

    // Handle page refresh/close
    window.addEventListener('beforeunload', endCall);

    // Sample ad rotation
    const adBanner = document.querySelector('.ad-container');
    const ads = [
      "Connect Your business with Us To See worldwide",
      "Sponsored: For sponsor contact ak786lawa@gmail.com",
      "Advertisement: Partner with us today"
    ];
    let currentAd = 0;
    setInterval(() => {
      currentAd = (currentAd + 1) % ads.length;
      adBanner.innerHTML = `<p>${ads[currentAd]}</p>`;
    }, 5000);

    // Responsive adjustments
    function handleResponsiveChanges() {
      if (window.innerWidth <= 768) {
        document.documentElement.style.setProperty('--footer-height', '70px');
        chatBox.style.maxHeight = '40vh';
      } else {
        document.documentElement.style.setProperty('--footer-height', '100px');
        chatBox.style.maxHeight = '50vh';
      }
    }

    window.addEventListener('resize', handleResponsiveChanges);
    window.addEventListener('load', handleResponsiveChanges);
  </script>
</body>

</html>